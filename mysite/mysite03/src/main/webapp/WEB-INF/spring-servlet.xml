<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">


	<!-- Validator, Conversion Service, Formatter Message Converter 설정 -->
	<!-- validator, conversionService, messageConverter를 자동으로 등록 -->
	<mvc:annotation-driven>
		<!-- StringHttpMessageConverter 기본으로 설정되어 있으나 한글이 깨지므로 추가 설정 필요 만약 내가 다른 
			메시지 컨버터를 등록하면 기본 등록된 메시지 컨버터들은 설정이 해제됨 -->
		<mvc:message-converters>
			<!-- Controller가 String을 반환할 때 메시지 컨버터 인코딩 -->
			<bean
				class="org.springframework.http.converter.StringHttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>text/html; charset=UTF-8</value>
					</list>
				</property>
			</bean>

			<!-- MappingJacksonHttpMessageConverter 1. Jackson Object Mapper를 이용해서 
				자바 객체와 JSON 문서를 자동변환 2. 제한은 없지만 프로퍼티를 가진 자바 빈 스타일 객체나 Map을 반환하면 정확한 JSON 
				문자열을 얻을 수 있다. -->
			<bean
				class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>application/json; charset=UTF-8</value>
					</list>
				</property>
			</bean>

		</mvc:message-converters>
		
     <!-- argument resolver -->
	<mvc:argument-resolvers>
         <bean class="com.saltlux.mysite.security.AuthUserHandlerMethodArgumentResolver"/>           
      </mvc:argument-resolvers>
		
	</mvc:annotation-driven>

	<!-- Interceptors -->
	<mvc:interceptors>
		<!-- user로 들어오는 모든 경로는 이 핸들러 인터셉터를 지나가도록 설정 -->
		<!-- test용 Interceptor <mvc:interceptor> <mvc:mapping path="/user/**" /> 
			<bean class="com.saltlux.mysite.interceptor.MyInterceptor02" /> </mvc:interceptor> -->
		<mvc:interceptor>
			<mvc:mapping path="/user/auth" />
			<bean class="com.saltlux.mysite.security.LoginInterceptor" />
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/user/logout" />
			<bean class="com.saltlux.mysite.security.LogoutInterceptor" />
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<!-- AuthInterceptor에서 디폴트 서블릿 핸들러와 관련된 정적 자원 처리를 통과시키는 방법으로 다음과 같이 url을 제외해주는 방법도 사용 가능
			  <mvc:exclude-mapping path="/assets/**"/> -->
			<mvc:exclude-mapping path="/user/auth"/>
			<mvc:exclude-mapping path="/user/logout"/>
			<bean class="com.saltlux.mysite.security.AuthInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>


	<!-- 서블릿 컨테이너의 디폴트 서블릿 위임 핸들러 -->
	<mvc:default-servlet-handler />

	<!-- View Resolver -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
		<property name="order" value="1" />
	</bean>


	<context:annotation-config />
	<context:component-scan
		base-package="com.saltlux.mysite.controller, com.saltlux.mysite.exception" />


</beans>
